version: 0.2

env:
  variables:
    AWS_ACCOUNT_ID: 600941914653
    AWS_REGION: ap-south-1
    ECR_REPOSITORY: 600941914653.dkr.ecr.ap-south-1.amazonaws.com/adama_internal
    CLUSTER_NAME: prod-adama-Adama-internal
    DEPLOYMENT_FILE: deployment.yaml  # Using deployment.yaml as per your request

phases:
  pre_build:
    commands:
      - echo "Checking project directory..."
      - pwd
      - ls -l  # Debugging: List files to verify docker-compose.yml is present
      - echo "Logging in to Amazon ECR..."
      - aws ecr get-login-password --region "$AWS_REGION" | docker login --username AWS --password-stdin "$ECR_REGISTRY"
      - export IMAGE_TAG=$CODEBUILD_BUILD_NUMBER

  build:
    commands:
    - echo Building Docker image...
    - docker build --no-cache -t adama_internal:$IMAGE_TAG -f login-app/Dockerfile login-app/
    - docker tag adama_internal:$IMAGE_TAG $ECR_REPOSITORY:$IMAGE_TAG
    - docker tag adama_internal:$IMAGE_TAG $ECR_REPOSITORY:latest

  post_build:
    commands:
    - echo Pushing Docker image to Amazon ECR...
    - docker push $ECR_REPOSITORY:$IMAGE_TAG
    - docker push $ECR_REPOSITORY:latest

    - echo Updating deployment.yaml with new container image...
    - sed -i 's@CONTAINER_IMAGE@'"$ECR_REPOSITORY:$IMAGE_TAG"'@' $DEPLOYMENT_FILE

    - echo Configuring kubectl for EKS...
    - aws eks update-kubeconfig --name $CLUSTER_NAME --region $AWS_REGION

    - echo Deploying application to EKS...
    - kubectl apply -f $DEPLOYMENT_FILE
    - kubectl apply -f service.yaml
    - kubectl apply -f ingress.yaml

artifacts:
  files:
    - deployment.yaml
    - service.yaml
    - ingress.yaml
